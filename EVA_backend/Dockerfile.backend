# 阶段1: 构建依赖
FROM python:3.12 AS builder

# 设置时区和环境变量
ENV TZ=Asia/Shanghai \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    POETRY_VERSION=1.7.1 \
    POETRY_HOME="/opt/poetry" \
    POETRY_VIRTUALENVS_CREATE=false \
    POETRY_NO_INTERACTION=1

# 配置 pip 源（使用中科大源）
RUN echo '[global]' > /etc/pip.conf \
    && echo 'index-url = https://pypi.mirrors.ustc.edu.cn/simple' >> /etc/pip.conf \
    && echo 'trusted-host = pypi.mirrors.ustc.edu.cn' >> /etc/pip.conf

# 使用阿里云镜像源并安装系统依赖
RUN set -ex \
    && echo "deb http://mirrors.aliyun.com/debian/ bookworm main contrib non-free non-free-firmware" > /etc/apt/sources.list \
    && echo "deb http://mirrors.aliyun.com/debian/ bookworm-updates main contrib non-free non-free-firmware" >> /etc/apt/sources.list \
    && echo "deb http://mirrors.aliyun.com/debian-security bookworm-security main contrib non-free non-free-firmware" >> /etc/apt/sources.list \
    && apt-get clean \
    && apt-get update \
    && apt-get install -y --no-install-recommends \
        build-essential \
        libpq-dev \
        curl \
        postgresql-client \
        git \
        python3-dev \
        gcc \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# 复制依赖文件
COPY pyproject.toml poetry.lock ./

# 安装 Poetry 并安装依赖
RUN pip install poetry==${POETRY_VERSION} -i https://pypi.mirrors.ustc.edu.cn/simple \
    && pip install torch -i https://pypi.tuna.tsinghua.edu.cn/simple \
    && pip install psycopg2-binary -i https://pypi.mirrors.ustc.edu.cn/simple \
    && poetry install --no-interaction --no-ansi --no-root

# 阶段2: 运行环境
FROM python:3.12

ENV TZ=Asia/Shanghai \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# 添加 PostgreSQL 运行库，解决 psycopg2 缺失 libpq.so.5 的问题
RUN set -ex \
    && apt-get update \
    && apt-get install -y --no-install-recommends libpq-dev \
    && apt-get install -y --no-install-recommends curl \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# 复制 pip 配置
COPY --from=builder /etc/pip.conf /etc/pip.conf

# 添加 root 用户
RUN useradd -m -s /bin/bash -u 1000 appuser

WORKDIR /app

# 复制项目代码
COPY --chown=appuser:appuser . .

# 复制已安装依赖
COPY --from=builder --chown=appuser:appuser /usr/local/lib/python3.12/site-packages /usr/local/lib/python3.12/site-packages

# 复制命令行工具（包含 celery 可执行文件）
COPY --from=builder --chown=appuser:appuser /usr/local/bin/ /usr/local/bin/

# 安装 supervisor、procps uvicorn
RUN apt-get update && apt-get install -y supervisor procps \
    && pip install uvicorn \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# 切换到非 root 用户
USER appuser

# 健康检查
HEALTHCHECK --interval=60s --timeout=20s --start-period=120s --retries=5 \
    CMD curl -f http://localhost:8000/api/health_check/ || exit 1

# 暴露端口
EXPOSE 8000

# 启动命令
CMD ["supervisord", "-c", "/app/supervisor.conf"]
