# EVA/docker-compose.yml

services:
  eva-backend:
    container_name: eva-backend
    image: eva-backend:latest
    build:
      context: ./EVA_backend
      dockerfile: Dockerfile.backend
    volumes:
      - ./EVA_backend:/app
      - ./EVA_backend/media:/app/media
      - ./EVA_backend/logfiles:/app/logfiles
      - ./EVA_backend/data/chroma_db:/app/data/chroma_db
      - ./EVA_backend/data/sqlite:/app/data/sqlite
    ports:
      - "8000:8000"
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    env_file:
      - ./EVA_backend/.env
    environment:
      - PYTHONPATH=/app
      - PYTHONIOENCODING=utf-8
      - LANG=C.UTF-8
      - DOCKER_COMPOSE=true
    networks:
      - eva-network

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health_check/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    ulimits:
      nproc: 65535
      nofile:
        soft: 20000
        hard: 40000
    platform: linux/amd64

  redis:
    container_name: eva-redis
    image: redis:6.2.6-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - eva-network

    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"
    platform: linux/amd64

  db:
    container_name: eva-db
    image: postgres:13.4-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_DB=eva_db
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    networks:
      - eva-network

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"
    platform: linux/amd64

  celery:
    container_name: eva-celery
    image: eva-backend:latest
    command: celery -A eva_backend_django worker -l info
    volumes:
      - ./EVA_backend:/app
      - ./EVA_backend/media:/app/media
      - ./EVA_backend/logfiles:/app/logfiles
      - ./EVA_backend/data/chroma_db:/app/data/chroma_db
      - ./EVA_backend/data/sqlite:/app/data/sqlite
    depends_on:
      - eva-backend
      - redis
      - db
    environment:
      - PYTHONPATH=/app
      - PYTHONIOENCODING=utf-8
      - LANG=C.UTF-8
      - DOCKER_COMPOSE=true
      - DJANGO_SETTINGS_MODULE=eva_backend_django.settings
      - TOKENIZERS_PARALLELISM=false
    env_file:
      - ./EVA_backend/.env
    healthcheck:
      test: ["CMD", "celery", "-A", "eva_backend_django", "inspect", "ping", "||", "exit", "1"]
      interval: 60s
      timeout: 20s
      retries: 5
      start_period: 180s
    networks:
      - eva-network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    platform: linux/amd64

networks:
  eva-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  llama-cpp-build:
    driver: local
