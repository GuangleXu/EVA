---
description: 
globs: 
alwaysApply: true
---
# EVA 项目规则（Project Rules）

## 语义描述

本规则用于规范 EVA 项目的整体开发、运行环境、架构设计、代码风格、模型接入与团队协作方式。适用于本地开发（PowerShell + Poetry + Cursor）、生产部署（Docker）、LangChain 框架集成与 Pinecone 记忆系统对接等全生命周期流程。

---

## 文件匹配模式

```
*.py
*.md
*.env
*.toml
Dockerfile
docker-compose.yml
*.sh
```

---

## 1. 系统环境

- 操作系统：Windows 11
- Shell：PowerShell（路径：`C:\WINDOWS\System32\WindowsPowerShell\v1.0\powershell.exe`）
- 工作目录：`E:\MyAIAssistant\EVA`
- 后端目录：`E:\MyAIAssistant\EVA\EVA_backend`
- 前端目录：`E:\MyAIAssistant\EVA\EVA_electron`
- Python：3.11.9
- 包管理工具：Poetry
- 编辑器：Cursor（用于命令执行和代码重构）

所有 Shell 和 Docker 命令必须直接在 Cursor 聊天界面中执行。

---

【重要补充】
- 所有开发、排查、答疑前，必须先查阅 EVA项目设计文档.md，确保所有操作和回答都符合最新设计规范。


---

## 1.1 Docker 开发环境

### 容器结构

```
EVA/
├── docker-compose.yml              # 服务编排
├── .env                            # 环境变量
├── .dockerignore                   # Docker 构建排除
└── EVA_backend/                    # 后端服务目录
    ├── Dockerfile.backend          # 后端服务镜像
    └── Dockerfile.celery           # Celery 服务镜像
```

### 开发工作流

1. **启动环境：**
```powershell
docker-compose up      # 启动所有服务
docker-compose up -d   # 后台启动
```

2. **开发代码：**
- 在本地编辑代码，通过 volume 挂载同步到容器
- 容器统一工作目录为 `/app`
- Django 开发服务支持热重载

3. **查看日志：**
```powershell
docker-compose logs -f             # 查看全部日志
docker-compose logs -f eva-backend # 查看后端日志
```

4. **进入容器：**
```powershell
docker-compose exec eva-backend bash  # 进入后端容器
docker-compose exec celery bash       # 进入 Celery 容器
```

### 环境配置标准

1. **路径约定：**
- 容器内基础路径：`/app`
- PYTHONPATH：`/app:/app/memory_service_app:/app/memory_service_app/utils`
- 媒体目录：`/app/media`

2. **数据持久化：**
- 代码目录：挂载 `./EVA_backend:/app`
- 媒体文件：命名卷 `media_volume:/app/media`
- 数据库数据：命名卷 `postgres_data:/var/lib/postgresql/data`

3. **环境变量：**
- 开发模式使用 `.env` 注入变量
- 敏感信息通过环境变量传入
- 禁止将配置硬编码到代码中

### 调试方式

1. **日志等级：**
- 开发：DEBUG
- 测试：INFO
- 生产：WARNING

2. **调试工具：**
- Django Debug Toolbar
- Django Extensions
- IPython/ipdb

3. **性能分析：**
- Django Silk
- cProfile
- memory_profiler

### 注意事项

1. **文件权限：**
- 容器内服务使用非 root 用户运行
- 保证挂载目录读写权限正确

2. **资源限制：**
- 设置容器资源上限
- 监控资源使用情况

3. **安全性：**
- 代码仓库中不得包含敏感信息
- 定期更新依赖包
- 配置安全的网络隔离策略

---

## 2. 命令行规范

- 使用 PowerShell 语法
- 禁止使用 `&&`，使用 `;` 连接多条命令
- 路径分隔符使用 `\`
- 环境变量写法：`$env:变量名`
- 所有命令必须包含：
  - 操作目的
  - 命令语法
  - 预期效果
- 如命令失败：
  - 提供报错分析和修复方案
  - 使用块状格式帮助无编程经验用户理解

建议将常用命令记录在 `dev_log.md` 文件中。

---

## 3. 项目架构

### 3.1 分层结构

| 层级 | 模块 | 说明 |
|------|------|------|
| 💬 LLM | DeepSeek | EVA 的大脑，负责推理与生成 |
| 🧠 记忆 | memory_service_app | 感知、工作、长期、规则、海马体、情绪模块 |
| 🧩 执行 | central_executive | 协调记忆、LLM、工具等模块 |
| 🛠 工具 | tools/ | 合并 MCP 与 ToolAgent 的所有工具模块 |
| 📜 计划 | - | 预留任务计划模块（未来开发） |
| 🧬 进化 | Cursor | 通过编辑代码实现 EVA 自我升级 |

### 3.2 大脑结构图

```
DeepSeek-LLM
   │
CentralExecutive
   ├── WorkingMemory
   ├── LongTermMemory (Pinecone)
   ├── RuleMemory
   ├── HippocampalEncoder
   ├── EmotionalModulator
   └── Tools
```

---

## 4. 模块规范

### 4.1 记忆系统

- 每个子模块应支持初始化 / 存储 / 检索 / 合并 / 清理
- 记忆模块之间禁止直接耦合
- 仅允许 CentralExecutive 作为协调入口

#### 4.1.1 记忆优先级定义

| 优先级 | 分值 | 说明 | 示例 |
|--------|------|------|------|
| CRITICAL | 100 | 关键系统规则 | 系统配置、核心规则 |
| HIGH | 80 | 用户明确指定需要记住的内容 | "记住我喜欢中国红" |
| MEDIUM | 60 | 一般对话内容 | 日常对话、建议 |
| LOW | 40 | 临时或不重要的信息 | 临时备注 |
| BACKGROUND | 20 | 背景信息 | 环境状态、时间戳 |

#### 4.1.2 存储规则

1. **容量限制**
   - 单条记忆最大 token 数：2048
   - 单条记忆最小 token 数：10
   - 上下文最大条目数：10
   - 相似度阈值：0.85（高于此值视为重复）

2. **保留策略**
   - CRITICAL：永久保留
   - HIGH：365天
   - MEDIUM：180天
   - LOW：30天
   - BACKGROUND：7天

3. **存储验证**
   - 必需元数据：timestamp、priority、source
   - 内容格式：必须为有效字符串
   - 重复检查：通过向量相似度或完全匹配判定

#### 4.1.3 检索规则

1. **基本参数**
   - 单次检索最大结果数：5
   - 时间衰减因子：0.1
   - 上下文窗口大小：3
   - 最小相关性分数：0.6

2. **优先级词触发**
   - CRITICAL：["必须", "记住", "重要", "关键"]
   - HIGH：["请记住", "记一下", "别忘了"]
   - MEDIUM：["可能", "也许", "建议"]
   - LOW：["随便", "临时", "暂时"]

#### 4.1.4 合并规则

1. **合并条件**
   - 相同优先级
   - 时间间隔 ≤ 1小时
   - 内容相关性分数 ≥ 0.8

2. **合并策略**
   - 冲突解决：新记忆优先
   - 合并方式：加权平均
   - 更新频率：变更触发

#### 4.1.5 清理规则

1. **执行策略**
   - 频率：每日一次
   - 执行时间：系统负载低时
   - 清理前备份：必需
   - 最小保留数：1000条

2. **异常处理**
   - 清理失败重试：最多3次
   - 备份验证：必需
   - 增量清理：每次最多处理1000条

#### 4.1.6 日志规范

1. **记录内容**
   - 存储操作：优先级、token数、时间戳
   - 检索操作：查询内容、匹配分数、耗时
   - 合并操作：源记忆ID、目标记忆ID、合并策略
   - 清理操作：清理数量、保留数量、耗时

2. **日志级别**
   - ERROR：操作失败
   - WARNING：接近限制或异常情况
   - INFO：常规操作
   - DEBUG：详细信息（仅开发环境）

### 4.2 工具系统（已合并 MCP + ToolAgent）

工具类型：

| 类型 | 示例 | 实现方式 |
|------|------|----------|
| 系统 | shell_tool, python_tool | 使用 subprocess 或 asyncio |
| Web | crawl_tool, search_tool | API 调用或网页爬虫 |
| AI | code_tool, huggingface_tool | 与 LangChain 兼容 |
| 外部 | weather_tool | 第三方 API 封装 |

```python
class MyTool(BaseTool):
    name = "tool_name"
    description = "..."
    def run(self, input: str) -> str:
        ...
```

所有工具应通过 `ToolManager` 注册。

### 4.3 大语言模型（LLM）模块

- 使用 DeepSeek（支持 SiliconFlow/OpenAPI）
- 通过 LangChain 的 PromptTemplate 管理提示词
- 支持动态上下文拼接
- 工具与记忆调用场景下，LLM 输出必须为结构化 JSON

### 4.4 向量一致性规范

- Pinecone 索引维度固定为 1024
- 所选嵌入模型输出维度必须一致
- 推荐模型：`BAAI/bge-large-en-v1.5`

```python
assert embedding.dimension == settings.PINECONE_DIMENSION
```

---

## 5. 测试与部署

### 5.1 测试规范

- 测试覆盖率 ≥ 80%
- 使用 `pytest`
- 文件命名：`test_<模块名>.py`
- 方法命名：`test_<函数>_<场景>`
- 场景覆盖：正常 / 边界 / 异常

### 5.2 部署规范

- 使用多容器 Docker 架构
- 所有配置读取自 `.env`（禁止直接读取）
- 使用 `settings.py` 中统一加载配置
- 使用 Supervisor 管理健康检查

---

## 6. 文档规范

| 类型 | 文件名 | 内容 |
|------|--------|------|
| 项目概览 | `README.md` | 简介、安装、使用方法 |
| 更新日志 | `CHANGELOG.md` | 版本记录 |
| 接口文档 | `api_spec.md` | 所有 API 说明 |
| 模块文档 | `module_<name>.md` | 模块结构、调用方式、示意图 |

---

## 7. 安全与性能

- 所有密钥需通过环境变量注入
- 能异步则用异步
- 日志分级：info / debug / error
- 定期监控 Pinecone 向量量与 Redis 缓存空间

---

## 8. 协作规范

- Git 分支：master / dev / feature / hotfix
- 提交信息格式：

```
<类型>: <内容>

feat: 添加 RuleMemory 的向量匹配功能
fix: 修复 Redis 初始化异常
```

- 项目管理工具：飞书或 GitHub Project

---

## 9. 代码重用优先（新增）

在新增模块或修改路径前，**必须优先查询现有代码中是否已存在类似实现**：

- ✅ 优先使用和适配现有模块
- ❌ 所有创建，删除的命令都需要得到用户确认才可执行
- 示例错误：已有 `working_term_memory.py` 时不应再创建 `working_memory.py`
- ✅ 鼓励使用 Cursor 全局搜索和结构树确认模块路径

该规则用于防止路径误判、模块重建以及依赖引用混乱。

